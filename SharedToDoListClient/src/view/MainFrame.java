/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import model.ClientHandler;
import model.ConnectionChecker;
import model.ConnectionHandler;
import model.SharedToDoListClient;
import model.Task;
import model.MessageProtokol;

/**
 *
 * @author FUJITSU
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public ClientHandler clientHandler;
    private Socket socket;
    
    public String userNameAktif;
    public ArrayList<String> messageOffLine = new ArrayList<>();
    
    public MainFrame(Socket s) {
        initComponents();
        socket = s;
        
//        cek status koneksi
        if (ConnectionHandler.isConnected) {
            //menonaktifkan tombol connect
            connectBtn.setEnabled(false);
            connectBtn.setText("connected");
        }
        
        
        TableTask.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                
                if (e.getClickCount() ==1) {
                    JTable target = (JTable)e.getSource();
                    int row = target.getSelectedRow();
                    int column = target.getSelectedColumn();
                    
                    if (column == 6 && ConnectionHandler.isConnected) {
                        String taskid = TableTask.getModel().getValueAt(row, 0).toString();
                        Object stat = TableTask.getModel().getValueAt(row, 6);
                        boolean st = (Boolean) stat;
                        try {
                            ConnectionHandler.sendString(MessageProtokol.PushRequest(clientHandler.getClient().getClientID(), taskid,clientHandler.ConvertBooelantoString(st),clientHandler.GetCurrentTime()));
                        } catch (IOException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        
                        UpdateStatus(taskid, st);
                    } else {
                        int i = 0;
                        String taskid = TableTask.getModel().getValueAt(row, 0).toString();
                        Object stat = TableTask.getModel().getValueAt(row, 6);
                        boolean st = (Boolean) stat;
                        UpdateStatus(taskid, st);
                        messageOffLine.add(MessageProtokol.PushRequest(clientHandler.getClient().getClientID(), taskid,clientHandler.ConvertBooelantoString(st),clientHandler.GetCurrentTime()));
                    }
                }
            }
        });
        
      
    }

    public void UpdateStatus(String taskid,boolean stat) {

        clientHandler.PushUpdate(taskid, stat);
        clientHandler.AppendLog(taskid, stat);
    }
    
    public void setClientID(String id) {
        clientHandler = new ClientHandler(id);
    }

    public void tampilkanTable() {
        int rowindex = 0;
        for (Task a : clientHandler.getClient().getTaskList()) {
             TableTask.getModel().setValueAt(a.GetTaskID(), rowindex, 0);
             TableTask.getModel().setValueAt(a.GetTaskName(), rowindex, 1);
             TableTask.getModel().setValueAt(a.GetDeadline(), rowindex, 2);
             TableTask.getModel().setValueAt(a.GetAssignee(), rowindex, 3);
             TableTask.getModel().setValueAt(a.GetTag(), rowindex, 4);
             TableTask.getModel().setValueAt(a.GetKategori(), rowindex, 5);
             TableTask.getModel().setValueAt(a.GetStatus(), rowindex, 6);
            
            rowindex++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableTask = new javax.swing.JTable();
        connectBtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        logOut = new javax.swing.JButton();
        synchronizeBtn = new javax.swing.JButton();
        currentUser = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("SharedToDoList");

        TableTask.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Task ID", "Task Name", "Deadline", "Assignee", "Tag", "Kategori", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TableTask);
        TableTask.getColumnModel().getColumn(0).setResizable(false);
        TableTask.getColumnModel().getColumn(1).setResizable(false);
        TableTask.getColumnModel().getColumn(2).setResizable(false);
        TableTask.getColumnModel().getColumn(3).setResizable(false);
        TableTask.getColumnModel().getColumn(4).setResizable(false);
        TableTask.getColumnModel().getColumn(5).setResizable(false);
        TableTask.getColumnModel().getColumn(6).setResizable(false);

        connectBtn.setText("connect");
        connectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectBtnActionPerformed(evt);
            }
        });

        jButton2.setText("refresh updates");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        logOut.setText("log out");
        logOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutActionPerformed(evt);
            }
        });

        synchronizeBtn.setText("synchronize");
        synchronizeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                synchronizeBtnActionPerformed(evt);
            }
        });

        currentUser.setText("jLabel2");

        jLabel2.setText("you are logged in as");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentUser))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(connectBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(synchronizeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(currentUser)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(connectBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(synchronizeBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(logOut))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (ConnectionHandler.isConnected) {
            try {
    //            send request
                System.out.println("message list : " + MessageProtokol.ListRequest(clientHandler.getClient().getClientID()));
                ConnectionHandler.sendString(MessageProtokol.ListRequest(clientHandler.getClient().getClientID()));

    //            menunggu data terkirim
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

    //            mengubah table
                clientHandler.GetUpdate(SharedToDoListClient.UPDATE_TASK_PATHNAME);
                tampilkanTable();
                
                System.out.println("Refresh Update Success");
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void connectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectBtnActionPerformed
        // TODO add your handling code here:
        try {
            SharedToDoListClient.socket = ConnectionHandler.getConnection();
            System.out.println("Socket berhasil dibuat kembali");
            } catch (UnknownHostException ex) {
//                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("Exception! Host tidak ditemukan");
            } catch (IOException ex) {
//                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("Exception! I/O");
            }
        
        //menjalankan connection checker kembali
        Thread t = new Thread(new ConnectionChecker(SharedToDoListClient.socket, this));
        t.start();
        
        if (SharedToDoListClient.socket!=null) {
            connectBtn.setEnabled(false);
            connectBtn.setText("connected");
        }
    }//GEN-LAST:event_connectBtnActionPerformed

    private void logOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutActionPerformed
        // TODO add your handling code here:
        SharedToDoListClient.loginF.statusMsg.setText("Anda telah berhasil melakukan log out");
        SharedToDoListClient.loginF.setVisible(true);
        
//        menutup main frame
        this.setVisible(false);
    }//GEN-LAST:event_logOutActionPerformed

    private void synchronizeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_synchronizeBtnActionPerformed
        // TODO add your handling code here:
        if (!messageOffLine.isEmpty()) {
            for (String a : messageOffLine) {
                try {
                    ConnectionHandler.sendString(a);
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
               
            }
            messageOffLine.clear();
        } 
        else 
        {
            JOptionPane.showMessageDialog(this, "Tidak ada perubahan yang perlu disinkronisasi");
        }
        
    }//GEN-LAST:event_synchronizeBtnActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new MainFrame().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableTask;
    public javax.swing.JButton connectBtn;
    public javax.swing.JLabel currentUser;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logOut;
    private javax.swing.JButton synchronizeBtn;
    // End of variables declaration//GEN-END:variables
}
